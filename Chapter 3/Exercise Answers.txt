Chapter 3:
Exercise 1:
1. 	These lines of code are from a REPL session. Is 𝑦 in scope for 𝑧?

	Prelude> let x = 5
	Prelude> let y = 7
	Prelude> let z = x * y 		-- yes.

2.	These lines of code are from a REPL session. Is ℎ in scope for
	𝑔? Go with your gut here.

	Prelude> let f = 3
	Prelude> let g = 6 * f + h  -- no?

3.	This code sample is from a source file. Is everything we need
	to execute area in scope?

	area d = pi * (r * r)
	r = d / 2 					-- no. d is not defined yet, right?

4. 	This code is also from a source file. Now are 𝑟 and 𝑑 in scope
	for area?

	area d = pi * (r * r)
		where r = d / 2			-- yes, as where creates a local variable for the preceding function definition
Exercise 2:
	Read the syntax of the following functions and decide whether it
	will compile. Test them in your REPL and try to fix the syntax errors
	where they occur.

1.	 ++ [1, 2, 3] [4, 5, 6]  -- This will not compile as the ++ operator is not prefix in this context
2. 	'<3' ++ ' Haskell' 		 -- This will compile as the ++ operator is used correctly and both items are of the same time (charlists)
3. 	concat ["<3", " Haskell"]-- This will also compile, as the prefix concat is used correctly, and both items are of the same type

Exercise 3:
1.  For the following lines of code, read the syntax carefully and
    decide if they are written correctly. Test them in your REPL
    after you’ve decided to check your work. Correct as many as
    you can.
    a) concat [[1, 2, 3], [4, 5, 6]]    -- Correct
    b) ++ [1, 2, 3] [4, 5, 6]           -- Incorrect, (++) [1, 2, 3] [4, 5, 6]
    c) (++) "hello" " world"            -- Correct
    d) ["hello" ++ " world]             -- Incorrect, ["hello" ++ " world"]
    e) 4 !! "hello"                     -- Incorrect, "hello" !! 4
    f) (!!) "hello" 4                   -- Correct
    g) take "4 lovely"                  -- Incorrect, take 4 "lovely"
    h) take 3 "awesome"                 -- Correct
2.  Next we have two sets: the first set is lines of code and the other
    is a set of results. Read the code and figure out which results
    came from which lines of code. Be sure to test them in the
    REPL.
    a) concat [[1 * 6], [2 * 6], [3 * 6]]
    b) "rain" ++ drop 2 "elbow"
    c) 10 * head [1, 2, 3]
    d) (take 3 "Julie") ++ (tail "yes")
    e) concat [tail [1, 2, 3],
    tail [4, 5, 6],
    tail [7, 8, 9]]

    Can you match each of the previous expressions to one of these
    results presented in a scrambled order?
    a) "Jules"              -d
    b) [2,3,5,6,8,9]        -e
    c) "rainbow"            -b
    d) [6,12,18]            -a
    e) 10                   -c
1. Given the list-manipulation functions mentioned in this chapter,
    write functions that take the following inputs and return
    the expected outputs. Do them directly in your REPL and use
    the take and drop functions you’ve already seen.
a)  -- Given
    "Curry is awesome"
    -- Return
    "Curry is awesome!"

    dropLast m = take x m
       where x = l - 1
             l = length m  -- Tried "where x = (- 1) $ length m", "where x = (-) 1 $ length m" dont know why it didnt work.
